@layer base;

:not(pre) > code,
pre {
	background: var(--color-HighlightBackground);
	font-family: var(--typo-Code-font-family);
	font-size: var(--typo-Code-font-size);
	tab-size: 2;

	@media (forced-colors) {
		border: 0.0625rem solid;
	}
}

:not(pre) > code {
	padding-block: 0.1em 0.2em;
	padding-inline: 0.4em;
}

pre > code {
	display: inline-block;
	padding: 1em;
}

/* Language label */

pre::before {
	background: var(--color-HighlightBackground);
	content: attr(data-language);
	display: block;
	inset-inline-start: 0;
	padding-block: 0.2em;
	padding-inline: 1em;
	position: sticky;
}

@media (forced-colors) {
	pre::before {
		border-block-end: 0.0625rem solid;
	}
}

/* Syntax highlighting */

pre {
	overflow-x: auto;

	.comment {
		color: var(--color-Code-comment);
	}

	.punctuation {
		color: var(--color-Code-punctuation);
	}

	.interpolation-punctuation {
		color: var(--color-Code-interpolation);
	}

	.keyword {
		color: var(--color-Code-keyword);
	}

	.tag,
	.tag > .punctuation:is(:first-child, :last-child) {
		color: var(--color-Code-tag);
	}

	.attr-name {
		color: var(--color-Code-attrName);
	}

	.attr-value {
		color: var(--color-Code-attrValue);
	}

	.rule {
		color: var(--color-Code-rule);
	}

	.selector {
		color: var(--color-Code-selector);
	}

	.property {
		color: var(--color-Code-property);
	}

	.key {
		color: var(--color-Code-key);
	}

	.important {
		color: var(--color-Code-important);
	}

	.function {
		color: var(--color-Code-function);
	}

	.parameter {
		color: var(--color-Code-parameter);
	}

	.string {
		color: var(--color-Code-string);
	}

	.number {
		color: var(--color-Code-number);
	}
}
